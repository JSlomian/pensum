services:
  nginx:
    image: nginx:latest
    working_dir: /var/www/
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./api/public:/var/www/api/public
      - ./app/.nuxt/dist/:/var/www/app/public
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "trap exit TERM; 
      while :; do
        certbot certonly --webroot --webroot-path=/var/www/certbot
        -d api.jslomian.dev -d app.jslomian.dev
        --email contact@jslomian.dev --agree-tos --no-eff-email || true;
        sleep 12h & wait $${!};
      done"

  backend:
    working_dir: /var/www/api
    restart: always
    environment:
      - VIRTUAL_HOST=api.jslomian.dev
      - LETSENCRYPT_HOST=api.jslomian.dev
      - APP_ENV=prod
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/api?serverVersion=16&charset=utf8
     # - CORS_ALLOW_ORIGIN=^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$
      - CORS_ALLOW_ORIGIN=https://app.jslomian.dev
    build: 
      context: ./api
      dockerfile: ../docker/php/Dockerfile
    volumes:
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/php-override.ini
    depends_on:
      - db
    networks:
      - app-network

  frontend:
    working_dir: /var/www/app
    environment:
      - VIRTUAL_HOST=app.jslomian.dev
      - LETSENCRYPT_HOST=app.jslomian.dev
      - API_URL=backend
    restart: always
    build:
      context: ./app
      dockerfile: ../docker/node/Dockerfile
    expose:
      - 3000
    networks:
      - app-network

  db:
    container_name: db
    image: postgres:latest
    restart: always
    volumes:
      - ./db:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-api}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge
